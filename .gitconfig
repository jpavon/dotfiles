[user]
	name = Julio Pavon
	email = julio@jpavon.com
[credential]
	helper = osxkeychain
[core]
	editor = subl -n -w
	autocrlf = true
	safecrlf = false
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

[alias]
	co   = checkout
	ci   = commit
	st   = status
	b   = branch
	hist = log --graph --pretty=format:'%Cred%h%Creset [%an]: %s %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative

	hist2 = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short

	l = log --pretty=oneline -n 20 --graph
	type = cat-file -t
	dump = cat-file -p

	# View the current working tree status using the short format
	s = status -s

	# Diff
	d = diff --patch-with-stat

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	cam = !git add -A && git commit -am

	# Switch to a branch, creating it if necessary
	go = checkout -B

	# Undo a `git push`
	undopush = push -f origin HEAD^:master

	# Git Reset Commit
	rs = reset --soft HEAD~1
	rh = reset --hard HEAD~1


[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[format]
	pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset

[color]
	# Use colors in Git commands that are capable of colored output when outputting to the terminal
	ui = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

# Use `origin` as the default remote on the `master` branch in all cases
[branch "master"]
	remote = origin
	merge = refs/heads/master